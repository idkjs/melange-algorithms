// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var HashtblWithOpenAddressing$Algorithms = require("../src/hashing/HashtblWithOpenAddressing.bs.js");

Jest.describe("Hashing With Open Addressing", (function (param) {
        var generate_keys = function (n) {
          if (n !== 0) {
            return {
                    hd: n,
                    tl: generate_keys(n - 1 | 0)
                  };
          } else {
            return /* [] */0;
          }
        };
        var keys = generate_keys(400);
        var setup = function (param) {
          var hash = HashtblWithOpenAddressing$Algorithms.create(undefined, (function (n) {
                  return n;
                }), (function (num_buckets, pre_hash, iter) {
                  return Caml_int32.mod_(pre_hash + iter | 0, num_buckets);
                }), undefined);
          List.iter((function (key) {
                  return HashtblWithOpenAddressing$Algorithms.add(hash, key, String(key));
                }), keys);
          return hash;
        };
        Jest.test("length", (function (param) {
                var hash = setup(undefined);
                var length = HashtblWithOpenAddressing$Algorithms.length(hash);
                return Jest.Expect.toEqual(400, Jest.Expect.expect(length));
              }));
        Jest.test("find", (function (param) {
                var hash = setup(undefined);
                var result = List.map((function (key) {
                        return HashtblWithOpenAddressing$Algorithms.find(hash, key);
                      }), keys);
                var expected = List.map((function (key) {
                        return String(key);
                      }), keys);
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("add overrides an existing binding", (function (param) {
                var hash = setup(undefined);
                HashtblWithOpenAddressing$Algorithms.add(hash, 17, "Hi");
                var e17 = HashtblWithOpenAddressing$Algorithms.find(hash, 17);
                return Jest.Expect.toEqual("Hi", Jest.Expect.expect(e17));
              }));
        Jest.test("remove removes the key from the map", (function (param) {
                var hash = setup(undefined);
                HashtblWithOpenAddressing$Algorithms.remove(hash, 17);
                return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                return HashtblWithOpenAddressing$Algorithms.find(hash, 17);
                              }));
              }));
        return Jest.test("remove throws when the key doesn't exists", (function (param) {
                      var hash = setup(undefined);
                      HashtblWithOpenAddressing$Algorithms.remove(hash, 17);
                      return Jest.Expect.toThrow(Jest.Expect.expect(function (param) {
                                      return HashtblWithOpenAddressing$Algorithms.remove(hash, 17);
                                    }));
                    }));
      }));

/*  Not a pure module */
