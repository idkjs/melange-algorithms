// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var List = require("bs-platform/lib/js/list.js");
var DynamicArray$Algorithms = require("../src/basic/DynamicArray.bs.js");

Jest.describe("Dynamic Array", (function (param) {
        var gen_elements = function (n) {
          var gen = function (n) {
            if (n !== -1) {
              return {
                      hd: n,
                      tl: gen(n - 1 | 0)
                    };
            } else {
              return /* [] */0;
            }
          };
          return List.rev(gen(n - 1 | 0));
        };
        var elements = gen_elements(400);
        var setup = function (param) {
          var dynamic_array = DynamicArray$Algorithms.create(undefined);
          List.iter((function (elm) {
                  return DynamicArray$Algorithms.push(dynamic_array, elm);
                }), elements);
          return dynamic_array;
        };
        Jest.test("length", (function (param) {
                var dynamic_array = setup(undefined);
                var length = DynamicArray$Algorithms.length(dynamic_array);
                return Jest.Expect.toBe(400, Jest.Expect.expect(length));
              }));
        Jest.test("get", (function (param) {
                var dynamic_array = setup(undefined);
                var result = DynamicArray$Algorithms.get(dynamic_array, 133);
                return Jest.Expect.toEqual(133, Jest.Expect.expect(result));
              }));
        Jest.test("set", (function (param) {
                var dynamic_array = setup(undefined);
                DynamicArray$Algorithms.set(dynamic_array, 71, -71);
                var result = DynamicArray$Algorithms.get(dynamic_array, 71);
                return Jest.Expect.toEqual(-71, Jest.Expect.expect(result));
              }));
        Jest.test("push", (function (param) {
                var dynamic_array = setup(undefined);
                DynamicArray$Algorithms.push(dynamic_array, 400);
                var result = DynamicArray$Algorithms.get(dynamic_array, 400);
                return Jest.Expect.toEqual(400, Jest.Expect.expect(result));
              }));
        Jest.test("pop", (function (param) {
                var dynamic_array = setup(undefined);
                var e399 = DynamicArray$Algorithms.pop(dynamic_array);
                var e398 = DynamicArray$Algorithms.pop(dynamic_array);
                return Jest.Expect.toEqual([
                            398,
                            399
                          ], Jest.Expect.expect([
                                e398,
                                e399
                              ]));
              }));
        return Jest.test("swap", (function (param) {
                      var dynamic_array = setup(undefined);
                      DynamicArray$Algorithms.swap(dynamic_array, 122, 233);
                      var a$prime = DynamicArray$Algorithms.get(dynamic_array, 122);
                      var b$prime = DynamicArray$Algorithms.get(dynamic_array, 233);
                      return Jest.Expect.toEqual([
                                  233,
                                  122
                                ], Jest.Expect.expect([
                                      a$prime,
                                      b$prime
                                    ]));
                    }));
      }));

/*  Not a pure module */
