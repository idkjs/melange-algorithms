// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var RollingHash$Algorithms = require("../src/hashing/RollingHash.bs.js");

function ord(t) {
  return t;
}

var IRH = RollingHash$Algorithms.Make({
      size: 10,
      ord: ord
    });

Jest.describe("Rolling Hash", (function (param) {
        Jest.test("compare returns true when two hashs have seen the same sequence", (function (param) {
                var h1 = Curry._1(IRH.create, 101);
                var h2 = Curry._1(IRH.create, 101);
                List.iter((function (n) {
                        return Curry._2(IRH.append, h1, n);
                      }), {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 5,
                                tl: {
                                  hd: 6,
                                  tl: {
                                    hd: 7,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                List.iter((function (n) {
                        return Curry._2(IRH.append, h2, n);
                      }), {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 5,
                                tl: {
                                  hd: 6,
                                  tl: {
                                    hd: 7,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(IRH.compare, h1, h2)));
              }));
        Jest.test("skips shifts the start of the sequence forward", (function (param) {
                var h1 = Curry._1(IRH.create, 101);
                var h2 = Curry._1(IRH.create, 101);
                List.iter((function (n) {
                        return Curry._2(IRH.append, h1, n);
                      }), {
                      hd: 3,
                      tl: {
                        hd: 4,
                        tl: {
                          hd: 5,
                          tl: {
                            hd: 6,
                            tl: {
                              hd: 7,
                              tl: /* [] */0
                            }
                          }
                        }
                      }
                    });
                List.iter((function (n) {
                        return Curry._2(IRH.append, h2, n);
                      }), {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: {
                            hd: 3,
                            tl: {
                              hd: 4,
                              tl: {
                                hd: 5,
                                tl: {
                                  hd: 6,
                                  tl: {
                                    hd: 7,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    });
                List.iter((function (n) {
                        return Curry._2(IRH.skip, h2, n);
                      }), {
                      hd: 0,
                      tl: {
                        hd: 1,
                        tl: {
                          hd: 2,
                          tl: /* [] */0
                        }
                      }
                    });
                return Jest.Expect.toBe(true, Jest.Expect.expect(Curry._2(IRH.compare, h1, h2)));
              }));
        return Jest.test("compare returns false when two hashs hold different sequences", (function (param) {
                      var h1 = Curry._1(IRH.create, 101);
                      var h2 = Curry._1(IRH.create, 101);
                      List.iter((function (n) {
                              return Curry._2(IRH.append, h1, n);
                            }), {
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: {
                                        hd: 6,
                                        tl: {
                                          hd: 7,
                                          tl: /* [] */0
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          });
                      List.iter((function (n) {
                              return Curry._2(IRH.append, h2, n);
                            }), {
                            hd: 0,
                            tl: {
                              hd: 1,
                              tl: {
                                hd: 2,
                                tl: {
                                  hd: 3,
                                  tl: {
                                    hd: 4,
                                    tl: {
                                      hd: 5,
                                      tl: {
                                        hd: 6,
                                        tl: /* [] */0
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          });
                      return Jest.Expect.toBe(false, Jest.Expect.expect(Curry._2(IRH.compare, h1, h2)));
                    }));
      }));

exports.IRH = IRH;
/* IRH Not a pure module */
