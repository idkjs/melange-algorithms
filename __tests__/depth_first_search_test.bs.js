// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Hashtbl = require("bs-platform/lib/js/hashtbl.js");
var DepthFirstSearch$Algorithms = require("../src/graphs/DepthFirstSearch.bs.js");

Jest.describe("Depth First Search", (function (param) {
        Jest.test("single node", (function (param) {
                var match = DepthFirstSearch$Algorithms.search({
                      hd: {
                        id: "A",
                        neighbours: /* [] */0
                      },
                      tl: /* [] */0
                    }, "A");
                var level = Hashtbl.find(match.level, "A");
                var parent = Hashtbl.find(match.parent, "A");
                return Jest.Expect.toEqual([
                            0,
                            undefined
                          ], Jest.Expect.expect([
                                level,
                                parent
                              ]));
              }));
        Jest.test("simple cycle", (function (param) {
                var match = DepthFirstSearch$Algorithms.search({
                      hd: {
                        id: "A",
                        neighbours: {
                          hd: "B",
                          tl: {
                            hd: "D",
                            tl: /* [] */0
                          }
                        }
                      },
                      tl: {
                        hd: {
                          id: "B",
                          neighbours: {
                            hd: "A",
                            tl: {
                              hd: "C",
                              tl: /* [] */0
                            }
                          }
                        },
                        tl: {
                          hd: {
                            id: "C",
                            neighbours: {
                              hd: "B",
                              tl: {
                                hd: "D",
                                tl: /* [] */0
                              }
                            }
                          },
                          tl: {
                            hd: {
                              id: "D",
                              neighbours: {
                                hd: "A",
                                tl: {
                                  hd: "C",
                                  tl: /* [] */0
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }, "A");
                var parent = match.parent;
                var level = match.level;
                var levels_0 = Hashtbl.find(level, "A");
                var levels_1 = Hashtbl.find(level, "B");
                var levels_2 = Hashtbl.find(level, "C");
                var levels_3 = Hashtbl.find(level, "D");
                var levels = [
                  levels_0,
                  levels_1,
                  levels_2,
                  levels_3
                ];
                var parents_0 = Hashtbl.find(parent, "A");
                var parents_1 = Hashtbl.find(parent, "B");
                var parents_2 = Hashtbl.find(parent, "C");
                var parents_3 = Hashtbl.find(parent, "D");
                var parents = [
                  parents_0,
                  parents_1,
                  parents_2,
                  parents_3
                ];
                return Jest.Expect.toEqual([
                            [
                              0,
                              1,
                              2,
                              3
                            ],
                            [
                              undefined,
                              "A",
                              "B",
                              "C"
                            ]
                          ], Jest.Expect.expect([
                                levels,
                                parents
                              ]));
              }));
        Jest.test("complete graph", (function (param) {
                var match = DepthFirstSearch$Algorithms.search({
                      hd: {
                        id: "A",
                        neighbours: {
                          hd: "B",
                          tl: {
                            hd: "C",
                            tl: {
                              hd: "D",
                              tl: /* [] */0
                            }
                          }
                        }
                      },
                      tl: {
                        hd: {
                          id: "B",
                          neighbours: {
                            hd: "A",
                            tl: {
                              hd: "C",
                              tl: {
                                hd: "D",
                                tl: /* [] */0
                              }
                            }
                          }
                        },
                        tl: {
                          hd: {
                            id: "C",
                            neighbours: {
                              hd: "A",
                              tl: {
                                hd: "B",
                                tl: {
                                  hd: "D",
                                  tl: /* [] */0
                                }
                              }
                            }
                          },
                          tl: {
                            hd: {
                              id: "D",
                              neighbours: {
                                hd: "A",
                                tl: {
                                  hd: "B",
                                  tl: {
                                    hd: "C",
                                    tl: /* [] */0
                                  }
                                }
                              }
                            },
                            tl: /* [] */0
                          }
                        }
                      }
                    }, "A");
                var parent = match.parent;
                var level = match.level;
                var levels_0 = Hashtbl.find(level, "A");
                var levels_1 = Hashtbl.find(level, "B");
                var levels_2 = Hashtbl.find(level, "C");
                var levels_3 = Hashtbl.find(level, "D");
                var levels = [
                  levels_0,
                  levels_1,
                  levels_2,
                  levels_3
                ];
                var parents_0 = Hashtbl.find(parent, "A");
                var parents_1 = Hashtbl.find(parent, "B");
                var parents_2 = Hashtbl.find(parent, "C");
                var parents_3 = Hashtbl.find(parent, "D");
                var parents = [
                  parents_0,
                  parents_1,
                  parents_2,
                  parents_3
                ];
                return Jest.Expect.toEqual([
                            [
                              0,
                              1,
                              2,
                              3
                            ],
                            [
                              undefined,
                              "A",
                              "B",
                              "C"
                            ]
                          ], Jest.Expect.expect([
                                levels,
                                parents
                              ]));
              }));
        return Jest.test("forest", (function (param) {
                      var match = DepthFirstSearch$Algorithms.search({
                            hd: {
                              id: "A",
                              neighbours: {
                                hd: "B",
                                tl: /* [] */0
                              }
                            },
                            tl: {
                              hd: {
                                id: "B",
                                neighbours: {
                                  hd: "A",
                                  tl: /* [] */0
                                }
                              },
                              tl: {
                                hd: {
                                  id: "C",
                                  neighbours: {
                                    hd: "D",
                                    tl: /* [] */0
                                  }
                                },
                                tl: {
                                  hd: {
                                    id: "D",
                                    neighbours: {
                                      hd: "C",
                                      tl: /* [] */0
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }
                          }, "A");
                      var parent = match.parent;
                      var level = match.level;
                      var levels_0 = Hashtbl.find(level, "A");
                      var levels_1 = Hashtbl.find(level, "B");
                      var levels_2 = Hashtbl.find(level, "C");
                      var levels_3 = Hashtbl.find(level, "D");
                      var levels = [
                        levels_0,
                        levels_1,
                        levels_2,
                        levels_3
                      ];
                      var parents_0 = Hashtbl.find(parent, "A");
                      var parents_1 = Hashtbl.find(parent, "B");
                      var parents_2 = Hashtbl.find(parent, "C");
                      var parents_3 = Hashtbl.find(parent, "D");
                      var parents = [
                        parents_0,
                        parents_1,
                        parents_2,
                        parents_3
                      ];
                      return Jest.Expect.toEqual([
                                  [
                                    0,
                                    1,
                                    undefined,
                                    undefined
                                  ],
                                  [
                                    undefined,
                                    "A",
                                    undefined,
                                    undefined
                                  ]
                                ], Jest.Expect.expect([
                                      levels,
                                      parents
                                    ]));
                    }));
      }));

/*  Not a pure module */
