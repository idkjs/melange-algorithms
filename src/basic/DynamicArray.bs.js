// Generated by Melange
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var InvalidArgument = /* @__PURE__ */Caml_exceptions.create("DynamicArray.InvalidArgument");

var InconsistentState = /* @__PURE__ */Caml_exceptions.create("DynamicArray.InconsistentState");

var ArrayIsEmpty = /* @__PURE__ */Caml_exceptions.create("DynamicArray.ArrayIsEmpty");

function create(param) {
  return {
          array: {
            contents: []
          },
          size: {
            contents: 0
          }
        };
}

function length(dynamic_array) {
  return dynamic_array.size.contents;
}

function contents(value) {
  if (value !== undefined) {
    return Caml_option.valFromOption(value);
  }
  throw {
        RE_EXN_ID: InconsistentState,
        _1: "expected a value",
        Error: new Error()
      };
}

function execute_if_index_is_valid(dynamic_array, index, fn) {
  var size = dynamic_array.size.contents;
  var array = dynamic_array.array.contents;
  if (index < 0 || index >= size) {
    throw {
          RE_EXN_ID: InvalidArgument,
          _1: "index out of bounds",
          Error: new Error()
        };
  }
  return Curry._1(fn, array);
}

function get(dynamic_array, index) {
  var fn = function (array) {
    return contents(Caml_array.get(array, index));
  };
  return execute_if_index_is_valid(dynamic_array, index, fn);
}

function set(dynamic_array, index, value) {
  var fn = function (array) {
    return Caml_array.set(array, index, Caml_option.some(value));
  };
  return execute_if_index_is_valid(dynamic_array, index, fn);
}

function push(dynamic_array, value) {
  var size = dynamic_array.size;
  var array = dynamic_array.array;
  var available_space = array.contents.length;
  if (size.contents === available_space) {
    array.contents = $$Array.append(array.contents, Caml_array.make(available_space + 1 | 0, undefined));
  }
  Caml_array.set(array.contents, size.contents, Caml_option.some(value));
  size.contents = size.contents + 1 | 0;
  
}

function pop(dynamic_array) {
  var size = dynamic_array.size;
  var array = dynamic_array.array;
  var available_space = array.contents.length;
  if (size.contents === 0) {
    throw {
          RE_EXN_ID: ArrayIsEmpty,
          Error: new Error()
        };
  }
  var index = size.contents - 1 | 0;
  var value = Caml_array.get(array.contents, index);
  Caml_array.set(array.contents, index, undefined);
  if (size.contents < (available_space / 4 | 0)) {
    array.contents = $$Array.sub(array.contents, 0, available_space / 2 | 0);
  }
  size.contents = size.contents - 1 | 0;
  return contents(value);
}

function swap(dynamic_array, a, b) {
  var a$p = get(dynamic_array, a);
  var b$p = get(dynamic_array, b);
  set(dynamic_array, a, b$p);
  return set(dynamic_array, b, a$p);
}

function inspect(dynamic_array) {
  return dynamic_array.array.contents.toString();
}

exports.InvalidArgument = InvalidArgument;
exports.InconsistentState = InconsistentState;
exports.ArrayIsEmpty = ArrayIsEmpty;
exports.create = create;
exports.length = length;
exports.get = get;
exports.set = set;
exports.push = push;
exports.pop = pop;
exports.swap = swap;
exports.inspect = inspect;
/* No side effect */
