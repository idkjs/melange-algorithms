// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var DynamicArray = require("./DynamicArray.bs.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var EmptyQueue = /* @__PURE__ */Caml_exceptions.create("Heap.EmptyQueue");

var HasHigherPriority = /* @__PURE__ */Caml_exceptions.create("Heap.HasHigherPriority");

function create(compare) {
  return {
          queue: DynamicArray.create(undefined),
          compare: compare
        };
}

function parent(index) {
  if (index !== 0) {
    return (index - 1 | 0) / 2 | 0;
  }
  
}

function left(index) {
  return (index << 1) + 1 | 0;
}

function right(index) {
  return ((index + 1 | 0) << 1);
}

function sift_down(_param, _index) {
  while(true) {
    var param = _param;
    var index = _index;
    var compare = param.compare;
    var queue = param.queue;
    var heap_size = DynamicArray.length(queue);
    var left_index = left(index);
    var right_index = right(index);
    var max_priority_index = index;
    max_priority_index = left_index < heap_size && Curry._2(compare, DynamicArray.get(queue, left_index).key, DynamicArray.get(queue, max_priority_index).key) ? left_index : max_priority_index;
    max_priority_index = right_index < heap_size && Curry._2(compare, DynamicArray.get(queue, right_index).key, DynamicArray.get(queue, max_priority_index).key) ? right_index : max_priority_index;
    var max_priority_index$1 = max_priority_index;
    if (max_priority_index$1 === index) {
      return ;
    }
    DynamicArray.swap(queue, max_priority_index$1, index);
    _index = max_priority_index$1;
    _param = {
      queue: queue,
      compare: compare
    };
    continue ;
  };
}

function sift_up(_param, _index) {
  while(true) {
    var param = _param;
    var index = _index;
    var compare = param.compare;
    var queue = param.queue;
    var parent_index = parent(index);
    if (parent_index === undefined) {
      return ;
    }
    if (!Curry._2(compare, DynamicArray.get(queue, index).key, DynamicArray.get(queue, parent_index).key)) {
      return ;
    }
    DynamicArray.swap(queue, index, parent_index);
    _index = parent_index;
    _param = {
      queue: queue,
      compare: compare
    };
    continue ;
  };
}

function extract(param) {
  var queue = param.queue;
  var heap_size = DynamicArray.length(queue);
  if (heap_size !== 0) {
    if (heap_size === 1) {
      return DynamicArray.pop(queue).value;
    }
    DynamicArray.swap(queue, 0, heap_size - 1 | 0);
    var res = DynamicArray.pop(queue);
    sift_down({
          queue: queue,
          compare: param.compare
        }, 0);
    return res.value;
  }
  throw {
        RE_EXN_ID: EmptyQueue,
        Error: new Error()
      };
}

function add(heap, key, value) {
  DynamicArray.push(heap.queue, {
        key: key,
        value: value
      });
  var heap_size = DynamicArray.length(heap.queue);
  return sift_up(heap, heap_size - 1 | 0);
}

function search(param, match_) {
  var queue = param.queue;
  var size = DynamicArray.length(queue);
  var _ind = 0;
  while(true) {
    var ind = _ind;
    if (ind === size) {
      return ;
    }
    var elem = DynamicArray.get(queue, ind);
    if (Curry._2(match_, elem.key, elem.value)) {
      return ind;
    }
    _ind = ind + 1 | 0;
    continue ;
  };
}

var RemoveElementNotFound = /* @__PURE__ */Caml_exceptions.create("Heap.RemoveElementNotFound");

function remove(param, match_) {
  var compare = param.compare;
  var queue = param.queue;
  var index = search({
        queue: queue,
        compare: compare
      }, match_);
  if (index !== undefined) {
    var size = DynamicArray.length(queue);
    DynamicArray.swap(queue, index, size - 1 | 0);
    var res = DynamicArray.pop(queue);
    sift_down({
          queue: queue,
          compare: compare
        }, index);
    return res.value;
  }
  throw {
        RE_EXN_ID: RemoveElementNotFound,
        Error: new Error()
      };
}

function update(t, match_, new_key, new_value) {
  remove({
        queue: t.queue,
        compare: t.compare
      }, match_);
  add({
        queue: t.queue,
        compare: t.compare
      }, new_key, new_value);
  
}

function head(param) {
  var queue = param.queue;
  var heap_size = DynamicArray.length(queue);
  if (heap_size !== 0) {
    return DynamicArray.get(queue, 0).value;
  }
  throw {
        RE_EXN_ID: EmptyQueue,
        Error: new Error()
      };
}

function decrease_root_priority(param, new_priority) {
  var compare = param.compare;
  var queue = param.queue;
  var current_priority = DynamicArray.get(queue, 0).key;
  var has_higher_priority = Curry._2(compare, new_priority, current_priority);
  if (has_higher_priority) {
    throw {
          RE_EXN_ID: HasHigherPriority,
          Error: new Error()
        };
  }
  var param$1 = {
    queue: queue,
    compare: compare
  };
  var index = 0;
  var compare$1 = param$1.compare;
  var queue$1 = param$1.queue;
  var current_priority$1 = DynamicArray.get(queue$1, index).key;
  var value = DynamicArray.get(queue$1, index).value;
  DynamicArray.set(queue$1, index, {
        key: new_priority,
        value: value
      });
  var has_higher_priority$1 = Curry._2(compare$1, new_priority, current_priority$1);
  if (has_higher_priority$1) {
    return sift_up({
                queue: queue$1,
                compare: compare$1
              }, index);
  } else {
    return sift_down({
                queue: queue$1,
                compare: compare$1
              }, index);
  }
}

function size(heap) {
  return DynamicArray.length(heap.queue);
}

exports.EmptyQueue = EmptyQueue;
exports.HasHigherPriority = HasHigherPriority;
exports.create = create;
exports.add = add;
exports.extract = extract;
exports.remove = remove;
exports.update = update;
exports.head = head;
exports.size = size;
exports.decrease_root_priority = decrease_root_priority;
/* No side effect */
