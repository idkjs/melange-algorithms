// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Exceptions = require("../Exceptions.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function isSome(o) {
  return o !== undefined;
}

function isNone(o) {
  return o === undefined;
}

function getWithDefault($$default, o) {
  if (o !== undefined) {
    return Caml_option.valFromOption(o);
  } else {
    return $$default;
  }
}

function getExn(o) {
  if (o !== undefined) {
    return Caml_option.valFromOption(o);
  }
  throw {
        RE_EXN_ID: Exceptions.UnexpectedNone,
        _1: "Option.getValueExn",
        Error: new Error()
      };
}

function makeNone(param) {
  
}

function makeSome(value) {
  return Caml_option.some(value);
}

function map(f, o) {
  if (o !== undefined) {
    return Caml_option.some(Curry._1(f, Caml_option.valFromOption(o)));
  }
  
}

function mapExn(f, o) {
  if (o !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(o));
  }
  throw {
        RE_EXN_ID: Exceptions.UnexpectedNone,
        _1: "Option.getValueExn",
        Error: new Error()
      };
}

function mapWithDefault($$default, f, o) {
  if (o !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(o));
  } else {
    return $$default;
  }
}

function flatMap(f, o) {
  if (o !== undefined) {
    return Curry._1(f, Caml_option.valFromOption(o));
  }
  
}

function $pipe$question$colon(o, $$default) {
  if (o !== undefined) {
    return Caml_option.valFromOption(o);
  } else {
    return $$default;
  }
}

function $great$great$pipe(opt, fn) {
  if (opt !== undefined) {
    return Caml_option.some(Curry._1(fn, Caml_option.valFromOption(opt)));
  }
  
}

function $great$great$eq(opt, fn) {
  if (opt !== undefined) {
    return Curry._1(fn, Caml_option.valFromOption(opt));
  }
  
}

var Infix = {
  $pipe$question$colon: $pipe$question$colon,
  $great$great$pipe: $great$great$pipe,
  $great$great$eq: $great$great$eq
};

exports.flatMap = flatMap;
exports.getExn = getExn;
exports.getWithDefault = getWithDefault;
exports.isNone = isNone;
exports.isSome = isSome;
exports.makeNone = makeNone;
exports.makeSome = makeSome;
exports.map = map;
exports.mapExn = mapExn;
exports.mapWithDefault = mapWithDefault;
exports.Infix = Infix;
/* No side effect */
