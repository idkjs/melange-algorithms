// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function comparisonToDirectionality(value) {
  if (value < 0) {
    return /* Increasing */0;
  } else if (value > 0) {
    return /* Decreasing */1;
  } else {
    return /* Equal */2;
  }
}

function search(get, getMiddle, $$continue, compare, testCompare, first, last, param) {
  var firstEl = Curry._1(get, first);
  var lastEl = Curry._1(get, last);
  var firstTest = Curry._1(testCompare, firstEl);
  var lastTest = Curry._1(testCompare, lastEl);
  var d = Curry._2(compare, firstEl, lastEl);
  var d$1 = comparisonToDirectionality(d);
  var shouldContinue = Curry._2($$continue, first, last);
  if (firstTest === 0) {
    return Caml_option.some(first);
  }
  if (lastTest === 0) {
    return Caml_option.some(last);
  }
  if (!shouldContinue) {
    return ;
  }
  switch (d$1) {
    case /* Increasing */0 :
        if (firstTest > 0) {
          return ;
        }
        if (lastTest < 0) {
          return ;
        }
        break;
    case /* Decreasing */1 :
        if (firstTest < 0) {
          return ;
        }
        if (lastTest > 0) {
          return ;
        }
        break;
    case /* Equal */2 :
        return ;
    
  }
  var _first = first;
  var _last = last;
  var _param;
  while(true) {
    var last$1 = _last;
    var first$1 = _first;
    if (Curry._2($$continue, first$1, last$1)) {
      var mid = Curry._2(getMiddle, first$1, last$1);
      var midEl = Curry._1(get, mid);
      var midTest = Curry._1(testCompare, midEl);
      var midDir = comparisonToDirectionality(midTest);
      var exit = 0;
      if (midDir >= 2) {
        return Caml_option.some(mid);
      }
      switch (d$1) {
        case /* Increasing */0 :
            exit = midDir ? 2 : 1;
            break;
        case /* Decreasing */1 :
            exit = midDir ? 1 : 2;
            break;
        case /* Equal */2 :
            return ;
        
      }
      switch (exit) {
        case 1 :
            _param = undefined;
            _first = mid;
            continue ;
        case 2 :
            _param = undefined;
            _last = mid;
            continue ;
        
      }
    } else {
      var firstEl$1 = Curry._1(get, first$1);
      var firstTest$1 = Curry._1(testCompare, firstEl$1);
      var lastEl$1 = Curry._1(get, last$1);
      var lastTest$1 = Curry._1(testCompare, lastEl$1);
      if (firstTest$1 !== 0) {
        if (lastTest$1 !== 0) {
          return ;
        } else {
          return Caml_option.some(last$1);
        }
      } else {
        return Caml_option.some(first$1);
      }
    }
  };
}

exports.search = search;
/* No side effect */
