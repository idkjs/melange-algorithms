// Generated by Melange
'use strict';

var $$Array = require("bs-platform/lib/js/array.js");
var $$Option = require("../common-types/Option.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Exceptions = require("../Exceptions.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function make(param) {
  return {
          first: 0,
          length: 0,
          capacity: 64,
          data: $$Array.init(64, (function (param) {
                  
                }))
        };
}

function length(ds) {
  return ds.length;
}

function isEmpty(ds) {
  return ds.length === 0;
}

function rawi(i, ds) {
  var i$1 = ds.first + i | 0;
  var i$2 = i$1 + ds.capacity | 0;
  return Caml_int32.mod_(i$2, ds.capacity);
}

function ensureCapacity(ds) {
  if (ds.length < ds.capacity) {
    return ;
  }
  var arr = $$Array.init((ds.capacity << 1) + 1 | 0, (function (i) {
          if (i < ds.length) {
            return Caml_array.get(ds.data, rawi(i, ds));
          }
          
        }));
  ds.first = 0;
  ds.capacity = arr.length;
  ds.data = arr;
  
}

function toList(ds) {
  return $$Array.to_list($$Array.init(ds.length, (function (i) {
                    return $$Option.getExn(Caml_array.get(ds.data, rawi(i, ds)));
                  })));
}

function fromList(list) {
  if (!list) {
    return make(undefined);
  }
  var arr = $$Array.map((function (el) {
          return Caml_option.some(el);
        }), $$Array.of_list(list));
  return {
          first: 0,
          length: arr.length,
          capacity: arr.length,
          data: arr
        };
}

function getIndexExn(index, ds) {
  if (index < 0 || index >= ds.length) {
    throw {
          RE_EXN_ID: Exceptions.IndexOutOfBounds,
          _1: "MutableArrayListCore.getIndexExn",
          _2: index,
          _3: 0,
          _4: ds.length,
          Error: new Error()
        };
  }
  return $$Option.getExn(Caml_array.get(ds.data, rawi(index, ds)));
}

function setIndexExn(index, el, ds) {
  if (index < 0 || index >= ds.length) {
    throw {
          RE_EXN_ID: Exceptions.IndexOutOfBounds,
          _1: "MutableArrayListCore.setIndexExn",
          _2: index,
          _3: 0,
          _4: ds.length,
          Error: new Error()
        };
  }
  return Caml_array.set(ds.data, rawi(index, ds), Caml_option.some(el));
}

function addFirst(el, ds) {
  ensureCapacity(ds);
  ds.first = ds.first - 1 | 0;
  if (ds.first < 0) {
    ds.first = ds.first + ds.capacity | 0;
  }
  var i = rawi(0, ds);
  Caml_array.set(ds.data, i, Caml_option.some(el));
  ds.length = ds.length + 1 | 0;
  return ds;
}

function addFirst2(el, ds) {
  var ds2 = fromList({
        hd: el,
        tl: toList(ds)
      });
  ds.first = ds2.first;
  ds.length = ds2.length;
  ds.capacity = ds2.capacity;
  ds.data = ds2.data;
  return ds;
}

function removeFirstExn(ds) {
  if (ds.length === 0) {
    throw {
          RE_EXN_ID: Exceptions.Empty,
          _1: "MutableArrayListCore.removeFirstExn",
          Error: new Error()
        };
  }
  var i = rawi(0, ds);
  Caml_array.set(ds.data, i, undefined);
  ds.first = ds.first + 1 | 0;
  ds.length = ds.length - 1 | 0;
  return ds;
}

function addLast(el, ds) {
  ensureCapacity(ds);
  var i = rawi(ds.first + ds.length | 0, ds);
  Caml_array.set(ds.data, i, Caml_option.some(el));
  ds.length = ds.length + 1 | 0;
  return ds;
}

function removeLastExn(ds) {
  if (ds.length === 0) {
    throw {
          RE_EXN_ID: Exceptions.Empty,
          _1: "MutableArrayListCore.removeLastExn",
          Error: new Error()
        };
  }
  var i = rawi(ds.length - 1 | 0, ds);
  Caml_array.set(ds.data, i, undefined);
  ds.length = ds.length - 1 | 0;
  return ds;
}

exports.make = make;
exports.length = length;
exports.isEmpty = isEmpty;
exports.rawi = rawi;
exports.ensureCapacity = ensureCapacity;
exports.toList = toList;
exports.fromList = fromList;
exports.getIndexExn = getIndexExn;
exports.setIndexExn = setIndexExn;
exports.addFirst = addFirst;
exports.addFirst2 = addFirst2;
exports.removeFirstExn = removeFirstExn;
exports.addLast = addLast;
exports.removeLastExn = removeLastExn;
/* No side effect */
