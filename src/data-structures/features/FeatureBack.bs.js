// Generated by Melange
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Stdlib = require("bs-platform/lib/js/stdlib.js");
var Exceptions = require("../../Exceptions.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var CamlListCore = require("../CamlListCore.bs.js");

var Default = {
  fastGetLast: /* SlowGetLast */0,
  fastAddLast: /* SlowAddLast */0,
  fastRemoveLast: /* SlowRemoveLast */0
};

function Add(Config) {
  var getLastExn = Config.fastGetLast;
  var getLastExn$1 = getLastExn ? getLastExn._0 : (function (ds) {
        return CamlListCore.getFirstExn(List.rev(Curry._1(Config.toList, ds)));
      });
  var getLast = function (ds) {
    try {
      return Caml_option.some(Curry._1(getLastExn$1, ds));
    }
    catch (exn){
      return ;
    }
  };
  var match = Config.fastGetLast;
  var match$1 = Config.fastRemoveLast;
  var getLastNExn;
  var exit = 0;
  if (match && match$1) {
    var removeLastExn = match$1._0;
    var getLastExn$2 = match._0;
    getLastNExn = (function (count, ds) {
        var ds$1 = ds;
        var result = /* [] */0;
        for(var i = 0; i < count; ++i){
          result = {
            hd: Curry._1(getLastExn$2, ds$1),
            tl: result
          };
          ds$1 = Curry._1(removeLastExn, ds$1);
        }
        return Curry._1(Config.fromList, result);
      });
  } else {
    exit = 1;
  }
  if (exit === 1) {
    getLastNExn = (function (count, ds) {
        var list = List.rev(Curry._1(Config.toList, ds));
        var list$1 = list;
        var result = /* [] */0;
        for(var i = 0; i < count; ++i){
          result = {
            hd: CamlListCore.getFirstExn(list$1),
            tl: result
          };
          list$1 = CamlListCore.dropFirstExn(list$1);
        }
        return Curry._1(Config.fromList, result);
      });
  }
  var getLastN = function (count, ds) {
    try {
      return Caml_option.some(Curry._2(getLastNExn, count, ds));
    }
    catch (exn){
      return ;
    }
  };
  var addLast = Config.fastAddLast;
  var addLast$1 = addLast ? addLast._0 : (function (el, ds) {
        var list = Curry._1(Config.toList, ds);
        return Curry._1(Config.fromList, Stdlib.$at(list, {
                        hd: el,
                        tl: /* [] */0
                      }));
      });
  var removeLastExn$1 = Config.fastRemoveLast;
  var removeLastExn$2 = removeLastExn$1 ? removeLastExn$1._0 : (function (ds) {
        var list = Curry._1(Config.toList, ds);
        var list$1 = List.rev(list);
        var list$2;
        if (list$1) {
          list$2 = list$1.tl;
        } else {
          throw {
                RE_EXN_ID: Exceptions.Empty,
                _1: "FeatureBack.removeLastExn",
                Error: new Error()
              };
        }
        return Curry._1(Config.fromList, List.rev(list$2));
      });
  var removeLastExn$3 = Config.fastRemoveLast;
  var removeLastNExn;
  if (removeLastExn$3) {
    var removeLastExn$4 = removeLastExn$3._0;
    removeLastNExn = (function (count, ds) {
        var ds$1 = ds;
        for(var i = 0; i < count; ++i){
          ds$1 = Curry._1(removeLastExn$4, ds$1);
        }
        return ds$1;
      });
  } else {
    removeLastNExn = (function (count, ds) {
        var list = Curry._1(Config.toList, ds);
        var list$1 = List.rev(list);
        var list$2 = list$1;
        for(var i = 0; i < count; ++i){
          list$2 = CamlListCore.dropFirstExn(list$2);
        }
        return Curry._1(Config.fromList, List.rev(list$2));
      });
  }
  var removeLastN = function (count, ds) {
    try {
      return Caml_option.some(Curry._2(removeLastNExn, count, ds));
    }
    catch (exn){
      return ;
    }
  };
  var removeLast = function (ds) {
    try {
      return Caml_option.some(Curry._1(removeLastExn$2, ds));
    }
    catch (exn){
      return ;
    }
  };
  var match$2 = Config.fastGetLast;
  var match$3 = Config.fastAddLast;
  var match$4 = Config.fastRemoveLast;
  var updateLastExn;
  var exit$1 = 0;
  if (match$2 && match$3 && match$4) {
    var removeLastExn$5 = match$4._0;
    var addLast$2 = match$3._0;
    var getLastExn$3 = match$2._0;
    updateLastExn = (function (fn, ds) {
        if (Curry._1(Config.isEmpty, ds)) {
          throw {
                RE_EXN_ID: Exceptions.Empty,
                _1: "FeatureBack.updateLastExn",
                Error: new Error()
              };
        }
        var first = Curry._1(getLastExn$3, ds);
        var rest = Curry._1(removeLastExn$5, ds);
        var newLast = Curry._1(fn, first);
        return Curry._2(addLast$2, newLast, rest);
      });
  } else {
    exit$1 = 1;
  }
  if (exit$1 === 1) {
    updateLastExn = (function (fn, ds) {
        var list = Curry._1(Config.toList, ds);
        var list$1 = List.rev(list);
        var list$2;
        if (list$1) {
          list$2 = {
            hd: Curry._1(fn, list$1.hd),
            tl: list$1.tl
          };
        } else {
          throw {
                RE_EXN_ID: Exceptions.Empty,
                _1: "FeatureBack.updateLastExn",
                Error: new Error()
              };
        }
        return Curry._1(Config.fromList, List.rev(list$2));
      });
  }
  var updateLast = function (fn, ds) {
    try {
      return Caml_option.some(Curry._2(updateLastExn, fn, ds));
    }
    catch (exn){
      return ;
    }
  };
  return {
          getLast: getLast,
          getLastExn: getLastExn$1,
          getLastN: getLastN,
          getLastNExn: getLastNExn,
          addLast: addLast$1,
          removeLast: removeLast,
          removeLastExn: removeLastExn$2,
          removeLastN: removeLastN,
          removeLastNExn: removeLastNExn,
          updateLast: updateLast,
          updateLastExn: updateLastExn
        };
}

exports.Default = Default;
exports.Add = Add;
/* No side effect */
