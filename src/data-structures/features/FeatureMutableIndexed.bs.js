// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");

function Add(Config) {
  var setIndexExn = Config.setIndexExn;
  var setIndex = function (index, el, ds) {
    try {
      Curry._3(setIndexExn, index, el, ds);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return {
              TAG: /* Error */1,
              _0: e
            };
    }
  };
  var updateIndexExn = function (index, fn, ds) {
    var newValue = Curry._1(fn, Curry._2(Config.getIndexExn, index, ds));
    return Curry._3(setIndexExn, index, newValue, ds);
  };
  var updateIndex = function (index, fn, ds) {
    try {
      updateIndexExn(index, fn, ds);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return {
              TAG: /* Error */1,
              _0: e
            };
    }
  };
  var swapExn = function (index1, index2, ds) {
    var newIndex2 = Curry._2(Config.getIndexExn, index1, ds);
    var newIndex1 = Curry._2(Config.getIndexExn, index2, ds);
    Curry._3(setIndexExn, index2, newIndex2, ds);
    Curry._3(setIndexExn, index1, newIndex1, ds);
    
  };
  var swap = function (index1, index2, ds) {
    try {
      swapExn(index1, index2, ds);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
    catch (raw_e){
      var e = Caml_js_exceptions.internalToOCamlException(raw_e);
      return {
              TAG: /* Error */1,
              _0: e
            };
    }
  };
  return {
          setIndex: setIndex,
          setIndexExn: setIndexExn,
          updateIndex: updateIndex,
          updateIndexExn: updateIndexExn,
          swap: swap,
          swapExn: swapExn
        };
}

exports.Add = Add;
/* No side effect */
