// Generated by Melange
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Exceptions = require("../../Exceptions.bs.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function Add(Config) {
  var get = function (ds, i) {
    var n = Curry._1(Config.length, ds);
    if (i < 0 || i >= n) {
      return ;
    } else {
      return Caml_option.some(Curry._2(Config.get, ds, i));
    }
  };
  var set = function (ds, i, value) {
    var n = Curry._1(Config.length, ds);
    if (i < 0 || i >= n) {
      return {
              TAG: /* Error */1,
              _0: {
                RE_EXN_ID: Exceptions.IndexOutOfBounds,
                _1: "Syntax.set",
                _2: i,
                _3: 0,
                _4: n
              }
            };
    } else {
      Curry._3(Config.set, ds, i, value);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
  };
  var $$Array = {
    get: get,
    set: set
  };
  var Syntax = {
    $$Array: $$Array
  };
  var get$1 = function (optDs, i) {
    if (optDs === undefined) {
      return ;
    }
    var ds = Caml_option.valFromOption(optDs);
    var n = Curry._1(Config.length, ds);
    if (i < 0 || i >= n) {
      return ;
    } else {
      return Caml_option.some(Curry._2(Config.get, ds, i));
    }
  };
  var set$1 = function (optDs, i, value) {
    if (optDs === undefined) {
      return {
              TAG: /* Error */1,
              _0: {
                RE_EXN_ID: Exceptions.UnexpectedNone,
                _1: "NestedSyntax.set"
              }
            };
    }
    var ds = Caml_option.valFromOption(optDs);
    var n = Curry._1(Config.length, ds);
    if (i < 0 || i >= n) {
      return {
              TAG: /* Error */1,
              _0: {
                RE_EXN_ID: Exceptions.IndexOutOfBounds,
                _1: "NestedSyntax.set",
                _2: i,
                _3: 0,
                _4: n
              }
            };
    } else {
      Curry._3(Config.set, ds, i, value);
      return {
              TAG: /* Ok */0,
              _0: undefined
            };
    }
  };
  var $$Array$1 = {
    get: get$1,
    set: set$1
  };
  var SyntaxNested = {
    $$Array: $$Array$1
  };
  var Array_get = Config.get;
  var Array_set = Config.set;
  var $$Array$2 = {
    get: Array_get,
    set: Array_set
  };
  var SyntaxExn = {
    $$Array: $$Array$2
  };
  var $$Array$3 = {};
  var SyntaxReset = {
    $$Array: $$Array$3
  };
  return {
          Syntax: Syntax,
          SyntaxNested: SyntaxNested,
          SyntaxExn: SyntaxExn,
          SyntaxReset: SyntaxReset
        };
}

exports.Add = Add;
/* No side effect */
