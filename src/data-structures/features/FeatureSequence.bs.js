// Generated by Melange
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Curry = require("bs-platform/lib/js/curry.js");
var DequeCore = require("../DequeCore.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Exceptions = require("../../Exceptions.bs.js");
var CamlListCore = require("../CamlListCore.bs.js");
var CamlArrayCore = require("../CamlArrayCore.bs.js");
var MutableArrayListCore = require("../MutableArrayListCore.bs.js");

var Default = {
  fastReverse: /* SlowReverse */0
};

function Add(Config) {
  var init = function (count, f) {
    return Curry._1(Config.fromList, CamlArrayCore.toList($$Array.init(count, f)));
  };
  var toCamlList = function (ds) {
    return CamlListCore.fromList(Curry._1(Config.toList, ds));
  };
  var fromCamlList = function (ds) {
    return Curry._1(Config.fromList, CamlListCore.toList(ds));
  };
  var toCamlArray = function (ds) {
    return CamlArrayCore.fromList(Curry._1(Config.toList, ds));
  };
  var fromCamlArray = function (ds) {
    return Curry._1(Config.fromList, CamlArrayCore.toList(ds));
  };
  var toMutableArrayList = function (ds) {
    return MutableArrayListCore.fromList(Curry._1(Config.toList, ds));
  };
  var fromMutableArrayList = function (ds) {
    return Curry._1(Config.fromList, MutableArrayListCore.toList(ds));
  };
  var toDeque = function (ds) {
    return DequeCore.fromList(Curry._1(Config.toList, ds));
  };
  var fromDeque = function (ds) {
    return Curry._1(Config.fromList, DequeCore.toList(ds));
  };
  var everyi = function (fn, ds) {
    var list = Curry._1(Config.toList, ds);
    var list$1 = list;
    var result = true;
    var i = 0;
    while(result && !CamlListCore.isEmpty(list$1)) {
      var match = list$1;
      if (match) {
        list$1 = match.tl;
        if (!Curry._2(fn, i, match.hd)) {
          result = false;
        }
        i = i + 1 | 0;
      } else {
        throw {
              RE_EXN_ID: Exceptions.InternalError,
              _1: "FeatureSequence.everyi",
              Error: new Error()
            };
      }
    };
    return result;
  };
  var every = function (fn, ds) {
    return everyi((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var somei = function (fn, ds) {
    var list = Curry._1(Config.toList, ds);
    var list$1 = list;
    var result = false;
    var i = 0;
    while(!result && !CamlListCore.isEmpty(list$1)) {
      var match = list$1;
      if (match) {
        list$1 = match.tl;
        if (Curry._2(fn, i, match.hd)) {
          result = true;
        }
        i = i + 1 | 0;
      } else {
        throw {
              RE_EXN_ID: Exceptions.InternalError,
              _1: "FeatureSequence.somei",
              Error: new Error()
            };
      }
    };
    return result;
  };
  var some = function (fn, ds) {
    return somei((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var nonei = function (fn, ds) {
    return everyi((function (i, el) {
                  return !Curry._2(fn, i, el);
                }), ds);
  };
  var none = function (fn, ds) {
    return nonei((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var forEachi = function (fn, ds) {
    var list = Curry._1(Config.toList, ds);
    return List.iteri(fn, list);
  };
  var forEach = function (fn, ds) {
    return forEachi((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var reverse = Config.fastReverse;
  var reverse$1 = reverse ? reverse._0 : (function (ds) {
        return Curry._1(Config.fromList, List.rev(Curry._1(Config.toList, ds)));
      });
  var reducei = function (fn, initialValue, ds) {
    var list = Curry._1(Config.toList, ds);
    var list$1 = list;
    var result = initialValue;
    var i = 0;
    while(!CamlListCore.isEmpty(list$1)) {
      var match = list$1;
      if (match) {
        list$1 = match.tl;
        result = Curry._3(fn, result, i, match.hd);
        i = i + 1 | 0;
      } else {
        throw {
              RE_EXN_ID: Exceptions.InternalError,
              _1: "FeatureSequence.reducei",
              Error: new Error()
            };
      }
    };
    return result;
  };
  var reduce = function (fn, initialValue, ds) {
    return reducei((function (acc, i, el) {
                  return Curry._2(fn, acc, el);
                }), initialValue, ds);
  };
  var reduceReversei = function (fn, initialValue, ds) {
    var list = Curry._1(Config.toList, ds);
    var list$1 = List.rev(list);
    var list$2 = list$1;
    var result = initialValue;
    var i = List.length(list$2) - 1 | 0;
    var i$1 = i;
    while(!CamlListCore.isEmpty(list$2)) {
      var match = list$2;
      if (match) {
        list$2 = match.tl;
        result = Curry._3(fn, result, i$1, match.hd);
        i$1 = i$1 - 1 | 0;
      } else {
        throw {
              RE_EXN_ID: Exceptions.InternalError,
              _1: "FeatureSequence.reduceReversei",
              Error: new Error()
            };
      }
    };
    return result;
  };
  var reduceReverse = function (fn, initialValue, ds) {
    return reduceReversei((function (acc, i, el) {
                  return Curry._2(fn, acc, el);
                }), initialValue, ds);
  };
  var mapi = function (fn, ds) {
    var list = Curry._1(Config.toList, ds);
    return Curry._1(Config.fromList, List.mapi(fn, list));
  };
  var map = function (fn, ds) {
    return mapi((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var filterKeepi = function (fn, ds) {
    var list = Curry._1(Config.toList, ds);
    var list$1 = list;
    var resultRev = /* [] */0;
    var i = 0;
    while(!CamlListCore.isEmpty(list$1)) {
      var match = list$1;
      if (match) {
        var hd = match.hd;
        list$1 = match.tl;
        if (Curry._2(fn, i, hd)) {
          resultRev = {
            hd: hd,
            tl: resultRev
          };
        }
        i = i + 1 | 0;
      } else {
        throw {
              RE_EXN_ID: Exceptions.InternalError,
              _1: "FeatureSequence.filterKeepi",
              Error: new Error()
            };
      }
    };
    return Curry._1(Config.fromList, List.rev(resultRev));
  };
  var filterKeep = function (fn, ds) {
    return filterKeepi((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var filterDropi = function (fn, ds) {
    return filterKeepi((function (i, el) {
                  return !Curry._2(fn, i, el);
                }), ds);
  };
  var filterDrop = function (fn, ds) {
    return filterDropi((function (i, el) {
                  return Curry._1(fn, el);
                }), ds);
  };
  var concatArray = function (dsArray) {
    var arr2D = $$Array.map(toCamlArray, dsArray);
    var lengths = $$Array.map((function (prim) {
            return prim.length;
          }), arr2D);
    var sum = $$Array.fold_left((function (sum, x) {
            return sum + x | 0;
          }), 0, lengths);
    var arr = {
      contents: 0
    };
    var i = {
      contents: 0
    };
    var ds = $$Array.init(sum, (function (param) {
            while(i.contents >= Caml_array.get(lengths, arr.contents)) {
              arr.contents = arr.contents + 1 | 0;
              i.contents = 0;
            };
            var value = Caml_array.get(Caml_array.get(arr2D, arr.contents), i.contents);
            i.contents = i.contents + 1 | 0;
            return value;
          }));
    return Curry._1(Config.fromList, CamlArrayCore.toList(ds));
  };
  var concatList = function (dsList) {
    return concatArray($$Array.of_list(dsList));
  };
  var flatten = function (ds2D) {
    var dsList = CamlListCore.fromList(Curry._1(Config.toList, ds2D));
    return concatArray($$Array.of_list(dsList));
  };
  var concat = function (ds1, ds2) {
    return concatArray($$Array.of_list({
                    hd: ds1,
                    tl: {
                      hd: ds2,
                      tl: /* [] */0
                    }
                  }));
  };
  return {
          init: init,
          toCamlList: toCamlList,
          fromCamlList: fromCamlList,
          toCamlArray: toCamlArray,
          fromCamlArray: fromCamlArray,
          toMutableArrayList: toMutableArrayList,
          fromMutableArrayList: fromMutableArrayList,
          toDeque: toDeque,
          fromDeque: fromDeque,
          every: every,
          everyi: everyi,
          forEach: forEach,
          forEachi: forEachi,
          none: none,
          nonei: nonei,
          some: some,
          somei: somei,
          filterDrop: filterDrop,
          filterDropi: filterDropi,
          filterKeep: filterKeep,
          filterKeepi: filterKeepi,
          map: map,
          mapi: mapi,
          reverse: reverse$1,
          reduce: reduce,
          reducei: reducei,
          reduceReverse: reduceReverse,
          reduceReversei: reduceReversei,
          flatten: flatten,
          concat: concat,
          concatArray: concatArray,
          concatList: concatList
        };
}

exports.Default = Default;
exports.Add = Add;
/* No side effect */
